# Day 06 {.unnumbered}

```{r}
#| include: false
library(ggplot2)
library(dplyr)
library(palmerpenguins)
```

Today's lesson covers [Section 3.0 - 3.3](https://nustat.github.io/intro-stat-data-sci/03-wrangling.html) and focuses on wrangling data with the pipe operator in conjunction with the `filter()` and `summarize()` functions.

::: {.callout-note icon="false"}
## Agenda

\~ 15 min <span class="tab"> Slide deck

\~ 25 min <span class="tab"> Students work on Activity 05

\~ 10 min <span class="tab"> Work through a select problem in detail from the activity as a class
:::

## Slide Deck

::: {.callout-note appearance="simple" icon="false"}
### Today's goals

<br/>

::: {.cols data-latex=""}
::: {.col data-latex="{0.60\\textwidth}"}
1.  Understand the pipe operator
2.  Subset rows of a dataset based on conditions
3.  Calculate summary statistics of a variable
:::

::: {.col data-latex="{0.40\\textwidth}"}
![](images/images_horst/dplyr_wrangling.png){height="1in"} <br> <small> Artwork by \@allison_horst </small>
:::
:::
:::

::: {.callout-note appearance="simple" icon="false"}
## Data Wrangling

In real data applications it is rare that data will be in the "perfect" form for us to use. We will typically need to manipulate or wrangle data into a form that is useful using the `dplyr` library.

-   The pipe operator `%>%` : takes the output of one function and passes it into another function as an argument.

```{r}
#| eval: false
data %>% 
  step 1 %>% 
  step 2
```

## filter()

-   `filter()` is used to subset a data frame, retaining all **rows** that satisfy your conditions.

Operators for the `filter` Function

::: {.cols data-latex=""}
::: {.col data-latex="{0.50\\textwidth}"}
| **Operator** | **Definition**           |
|--------------|--------------------------|
| `==`         | equal                    |
| `>`          | greater than             |
| `>=`         | greater than or equal to |
:::

::: {.col data-latex="{0.50\\textwidth}"}
| **Operator** | **Definition**        |
|--------------|-----------------------|
| `!=`         | not equal             |
| `<`          | less than             |
| `<=`         | less than or equal to |
:::
:::

:::

::: {.callout-note appearance="simple" icon="false"}
## Example 1

Consider the `penguins` dataset.

Subset the dataset to only include 'male' penguins.

### Code

```{r}
#| eval: false
penguins %>% 
  filter(            )
```

:::

::: {.callout-note appearance="simple" icon="false"}
## Example 1

Consider the `penguins` dataset.

Subset the dataset to only include 'male' penguins.

### Code

```{r}
#| eval: false
penguins %>% 
  filter(sex == "male")
```


Remember to store your data with a new meaningful name.
:::


::: {.callout-note appearance="simple" icon="false"}
## Example 1

Consider the `penguins` dataset.

Subset the dataset to only include 'male' penguins.

::: panel-tabset
## Code

```{r}
penguins_male <- penguins %>% 
  filter(sex == "male")
```

## New Data

```{r}
glimpse(penguins_male)
```
:::

<br>

Remember to store your data with a new meaningful name.
:::


![](images/images_lecture/participate_icon.png){height="0.5in"}

::: {.callout-note appearance="simple" icon="false"}
## Example 2

Subset the dataset to only include 'male' penguins that weigh more than 4000 grams.

::: panel-tabset
## Code

```{r}
penguins_male <- penguins %>% 
  filter(sex == "male")
```

## Data

```{r}
glimpse(penguins)
```
:::
:::


::: {.callout-note appearance="simple" icon="false"}
## Example 2

Subset the dataset to only include 'male' penguins that weigh more than 4000 grams.

::: panel-tabset
## Code

```{r}
penguins_heavy_m <- penguins %>% 
  filter(sex == "male", body_mass_g > 4000)
```

## Alternate Code

**and** can be represented by either a comma **,** or the **&** symbol

```{r}
#| eval: false
penguins_heavy_m <- penguins %>% 
  filter(sex == "male" & body_mass_g > 4000)
```

<br>

Note: Since we already created an only males dataset you could have started with that and proceeded to filter based on weight.

```{r}
#| eval: false
penguins_heavy_m <- penguins_male %>% 
  filter(body_mass_g > 4000)
```

## New Data

```{r}
glimpse(penguins_heavy_m)
```
:::

ALWAYS inspect your new dataset to make sure everything is as expected.

:::


::: {.callout-note appearance="simple" icon="false"}
## summarize()

`summarize()` function reduces a data frame to a summary of just the specified variable.

<br>

**Useful summary statistics**:

```{r}
#| eval: false
data_sumamry <- data %>% 
  summarize(mean = mean(variable),
            median = median(variable),
            sd = sd(variable),
            iqr = IQR(variable),
            count = n())
```

Now we can add calculations to describe the center and spread of our distribution plots!
:::


![](images/images_lecture/participate_icon.png){height="0.5in"}

::: {.callout-note appearance="simple" icon="false"}
## Understanding summary statistics

Which of the following summary statistics are invariant to outliers?

    a) mean     
    b) median   
    c) sd    
    d) IQR

How would the standard deviation of a distribution change if the maximum value was doubled?

    a) increase
    b) decrease
    c) stay the same
    d) not enough information
:::

![](images/images_lecture/participate_icon.png){height="0.5in"}

::: {.callout-note appearance="simple" icon="false"}

## Example 3

Consider the `penguins` dataset.

Summarize the average `flipper_length_mm` and count for penguins that are either "Adelie" `species` or "Gentoo" `species`. Which of the following is correct?

```{r}
#| eval: false
# a)
penguins_summary_a <- penguins %>% 
  filter(species == "Adelie" | "Gentoo") %>% 
  summarize(mean = mean(flipper_length_mm),
            count = n() )
# b)
penguins_summary_b <- penguins %>% 
  filter(species == "Adelie" | species == "Gentoo") %>% 
  summarize(mean = mean(flipper_length_mm),
            count = n() )
#c)
penguins_summary_c <- penguins %>% 
  summarize(mean = mean(flipper_length_mm),
            count = n() ) %>% 
  filter(species == "Adelie" & species == "Gentoo")
#d)
penguins_summary_d <- penguins %>% 
  filter(species == "Adelie" & species == "Gentoo") %>% 
  summarize(mean = mean(flipper_length_mm),
            count = n(flipper_length_mm) )
```

:::


::: {.callout-note appearance="simple" icon="false"}
## Example 3

Consider the `penguins` dataset.

Summarize the average `flipper_length_mm` and count for penguins that are either "Adelie" `species` or "Gentoo" `species`. Which of the following is correct?

```{r}
#| eval: false
# b)
penguins_summary_b <- penguins %>% 
  filter(species == "Adelie" | species == "Gentoo") %>% 
  summarize(mean = mean(flipper_length_mm),
            count = n() )
```
:::

::: {.callout-note appearance="simple" icon="false"}
## Example 3 (continued)

Print the data summary.

```{r}
penguins_summary_b <- penguins %>% 
  filter(species == "Adelie" | species == "Gentoo") %>% 
  summarize(mean = mean(flipper_length_mm),
            count = n() )
penguins_summary_b
```

:::


::: {.callout-note appearance="simple" icon="false"}
## Example 3 (continued)

Print the data summary.

```{r}
penguins_summary_b <- penguins %>% 
  filter(species == "Adelie" | species == "Gentoo") %>% 
  summarize(mean = mean(flipper_length_mm, na.rm = TRUE),
            count = n() )
penguins_summary_b
```
:::

::: {.callout-note appearance="simple" icon="false"}
## Important information

-   Order of pipe operations matters!
-   If you are using `&` and `|` in the same filter be very careful and use parenthesis.
-   Missing data is entered as `NA` in a data frame cell and can produce an error when using `summarize` unless you set na.rm=TRUE (ie: remove the NA values).
:::

## Activity Solution

Need to add. See RStudio Cloud TA Solutions for now.

## Homework

-   Complete and submit Activity 05

-   Read Sections 3.4 - 3.9 of the book

-   Complete and submit Reading Check 06_wrangling2
